---
title: "ST558 Homework 9"
format: html
editor: visual
---

## Reading in the Data
```{r}
library(tidyverse)
temp_data <- read_csv("SeoulBikeData.csv", col_names = TRUE, locale = locale(encoding="latin1"))
```

## Checking the Data

```{r}
bike_data <- temp_data |>
  drop_na() |>  # removes any rows with missing values (there are none)
  mutate(Date = dmy(Date)) |>  # converts date column to date variable
  mutate(across(where(is.character), as.factor))  # converts all other character columns into factors

## renaming all variables
bike_names <- c("date", "count", "hour", "temp", "humidity", "windspeed", "visibility", "dewpoint", "radiation", "rainfall",
                "snowfall", "season", "holiday", "funcday")

names(bike_data) <- bike_names
```

```{r}
## count is 0 when funcday = No, removing from data
bike_data <- bike_data |>
  filter(funcday != "No")
```

```{r}
## final summary
sum_data <- bike_data |>
  group_by(date, season, holiday) |>
  summarize(count = sum(count, na.rm = TRUE),
            rainfall = sum(rainfall, na.rm = TRUE),
            snowfall = sum(snowfall, na.rm = TRUE),
            across(where(is.numeric) & !c(count, hour), mean, na.rm = TRUE)
            )
```

## Split the Data
```{r}
library(tidymodels)
bike_split <- initial_split(sum_data, 0.75)
bike_train <- training(bike_split)
bike_test <- testing(bike_split)
```

```{r}
bike_10_fold <- vfold_cv(bike_train, 10)
```

## Fitting MLR Models
```{r}
## first recipe
bike_rec_1 <- 
  recipe(count ~ ., data = sum_data) |>
  update_role(date, new_role = "ID") |>
  step_date(date, features = "dow") |>
  step_mutate(day_type = factor(if_else(date_dow %in% c("Sat", "Sun"), "weekend", "weekday"))) |>
  step_rm(date_dow) |>
  step_normalize(all_numeric(), -all_outcomes()) |>
  step_dummy(season, holiday, day_type)
```

```{r}
## second recipe
bike_rec_2 <- 
  recipe(count ~ ., data = sum_data) |>
  update_role(date, new_role = "ID") |>
  step_date(date, features = "dow") |>
  step_mutate(day_type = factor(if_else(date_dow %in% c("Sat", "Sun"), "weekend", "weekday"))) |>
  step_rm(date_dow) |>
  step_normalize(all_numeric(), -all_outcomes()) |>
  step_dummy(season, holiday, day_type) |>
  step_interact(terms = ~starts_with("season")*starts_with("holiday") + temp*rainfall) |>
  step_interact(terms = ~season_Spring*temp + season_Winter*temp) |>
  step_interact(terms = ~season_Summer*temp)
```

```{r}
## third recipe
bike_rec_3 <- 
  recipe(count ~ ., data = sum_data) |>
  update_role(date, new_role = "ID") |>
  step_date(date, features = "dow") |>
  step_mutate(day_type = factor(if_else(date_dow %in% c("Sat", "Sun"), "weekend", "weekday"))) |>
  step_rm(date_dow) |>
  step_normalize(all_numeric(), -all_outcomes()) |>
  step_dummy(season, holiday, day_type) |>
  step_interact(terms = ~starts_with("season")*starts_with("holiday") + temp*rainfall) |>
  step_interact(terms = ~season_Spring*temp + season_Winter*temp) |>
  step_interact(terms = ~season_Summer*temp) |>
  step_poly(rainfall, snowfall, temp, humidity, windspeed, visibility, dewpoint, radiation, degree = 2)
```

```{r}
## fitting the models
bike_mod <- linear_reg() |>
  set_engine("lm")

bike_wfl_1 <- workflow() |>
  add_recipe(bike_rec_1) |>
  add_model(bike_mod)

bike_wfl_2 <- workflow() |>
  add_recipe(bike_rec_2) |>
  add_model(bike_mod)

bike_wfl_3 <- workflow() |>
  add_recipe(bike_rec_3) |>
  add_model(bike_mod)
```

```{r}
bike_cv_fits_1 <- bike_wfl_1 |>
  fit_resamples(bike_10_fold)

bike_cv_fits_2 <- bike_wfl_2 |>
  fit_resamples(bike_10_fold)

bike_cv_fits_3 <- bike_wfl_3 |>
  fit_resamples(bike_10_fold)

collect_metrics(bike_cv_fits_1)
collect_metrics(bike_cv_fits_2)
collect_metrics(bike_cv_fits_3)  # lowest RMSE
```

```{r}
## fitting best model to entire training data set
best_fit  <- last_fit(bike_wfl_3, bike_split)
collect_metrics(best_fit)

best_fit |>
  extract_fit_parsnip() |>
  tidy()
```

## LASSO Model
```{r}
## creating the recipe
LASSO_rec <-
  recipe(count ~ ., data = sum_data) |>
  update_role(date, new_role = "ID") |>
  step_date(date, features = "dow") |>
  step_mutate(day_type = factor(if_else(date_dow %in% c("Sat", "Sun"), "weekend", "weekday"))) |>
  step_rm(date_dow) |>
  step_normalize(all_numeric(), -all_outcomes()) |>
  step_dummy(season, holiday, day_type)
```

```{r}
LASSO_spec <- linear_reg(penalty = tune(), mixture = 1) |>
  set_engine("glmnet")

LASSO_wkf <- workflow() |>
  add_recipe(LASSO_rec) |>
  add_model(LASSO_spec)
```

```{r}
LASSO_grid <- LASSO_wkf |>
  tune_grid(resamples = bike_10_fold,
            grid = grid_regular(penalty(), levels = 200)) 
```

```{r}
lowest_rmse <- LASSO_grid |>
  select_best(metric = "rmse")
```

```{r}
LASSO_wkf |>
  finalize_workflow(lowest_rmse) |>
  last_fit(bike_split) |>
  collect_metrics()  # rmse is 4274.54
```

## Regression Tree Model
```{r}
## creating the recipe
tree_rec <-
  recipe(count ~ ., data = sum_data) |>
  update_role(date, new_role = "ID") |>
  step_date(date, features = "dow") |>
  step_mutate(day_type = factor(if_else(date_dow %in% c("Sat", "Sun"), "weekend", "weekday"))) |>
  step_rm(date_dow) |>
  step_normalize(all_numeric(), -all_outcomes()) |>
  step_dummy(season, holiday, day_type)
```

```{r}
tree_mod <- decision_tree(tree_depth = tune(),
                          min_n = 20,
                          cost_complexity = tune()) |>
  set_engine("rpart") |>
  set_mode("regression")

tree_wkf <- workflow() |>
  add_recipe(tree_rec) |>
  add_model(tree_mod)
```

```{r}
tree_grid <- grid_regular(cost_complexity(),
                          tree_depth(),
                          levels = c(10, 5))
```

```{r}
tree_fits <- tree_wkf |> 
  tune_grid(resamples = bike_10_fold,
            grid = tree_grid)
```

```{r}
tree_best_params <- tree_fits |>
  select_best(metric = "rmse")

tree_final_wkf <- tree_wkf |>
  finalize_workflow(tree_best_params)

tree_final_fit <- tree_final_wkf |>
  last_fit(bike_split)

tree_final_fit |>
  collect_metrics()
```

## Bagged Tree Model
```{r}
library(baguette)
bag_spec <- bag_tree(tree_depth = tune(), 
                     min_n = 10, 
                     cost_complexity = tune()) |>
  set_engine("rpart") |>
  set_mode("regression")

bag_wkf <- workflow() |>
  add_recipe(tree_rec) |>
  add_model(bag_spec)
```

```{r}
bag_grid <- grid_regular(cost_complexity(),
                          tree_depth(),
                          levels = c(10, 5))
```

```{r}
bag_fits <- bag_wkf |> 
  tune_grid(resamples = bike_10_fold,
            grid = bag_grid)
```

